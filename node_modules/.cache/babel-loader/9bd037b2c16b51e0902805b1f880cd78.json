{"ast":null,"code":"var _jsxFileName = \"/Users/aundrekerr/Projects/React2019/cp24/src/components/Traffic.js\";\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Loading from './loading/Loading.js';\nimport TrafficCameras from './traffic/TrafficCameras.js';\nimport { fetchCameras } from '../utils/api';\nimport '../styles/components/traffic/_traffic.scss';\nimport '../styles/components/traffic/_camera-select.scss';\n/**\n * Component responsible for rendering the traffic components.\n */\n\nexport default class Traffic extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      cameras: {},\n      camIndex: 0,\n      roadways: [],\n      roads: [],\n      currentRoadway: 'select',\n      value: '',\n      suggestions: [],\n      trafficToggle: 'cameras'\n    };\n\n    this.handleSelectChange = event => {\n      const newRoads = this.state.cameras.filter(cam => cam.RoadwayName === event.target.value && cam.Organization === \"MTO\");\n      this.setState({\n        roads: newRoads,\n        currentRoadway: event.target.value,\n        value: ''\n      });\n    };\n\n    this.onChange = (event, {\n      newValue,\n      method\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      const roadNames = this.state.roads.map(road => road.Name);\n      this.setState({\n        suggestions: this.getSuggestions(value, roadNames)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.onSuggestionSelected = (event, {\n      suggestionValue\n    }) => {\n      const newIndex = this.state.roads.findIndex(e => e.Name === suggestionValue);\n      console.log(newIndex);\n      this.setState({\n        camIndex: newIndex\n      });\n    };\n\n    this.cameraElement = React.createRef();\n  }\n\n  componentDidMount() {\n    fetchCameras().then(data => {\n      const cams = data.filter(cam => cam.Organization === \"MTO\");\n      const roadways = [...new Set(cams.map(({\n        RoadwayName\n      }) => RoadwayName))];\n      const roads = data.filter(cam => cam.RoadwayName === \"HWY 401\" && cam.Organization === \"MTO\");\n      const roadNames = roads.map(road => road.Name);\n      this.setState({\n        loading: false,\n        cameras: cams,\n        roadways: roadways,\n        roads: roads,\n        currentRoadway: roadways[1],\n        suggestions: roadNames\n      });\n    });\n  }\n\n  componentDidUpdate() {\n    this.cameraElement.current.changeCameraIndex(this.state.camIndex);\n  }\n\n  getInitialState() {\n    return {\n      currentRoadway: 'select'\n    };\n  }\n\n  handleSelectChange(event) {\n    const newRoads = this.state.cameras.filter(cam => cam.RoadwayName === event.target.value && cam.Organization === \"MTO\");\n    this.setState({\n      roads: newRoads,\n      currentRoadway: event.target.value,\n      camIndex: 0,\n      value: ''\n    });\n  }\n\n  getSuggestions(value, roads) {\n    const inputValue = value.trim().toLowerCase();\n    return roads.filter(x => x.toLowerCase().includes(inputValue.toLowerCase()));\n  }\n\n  getSuggestionValue(suggestion) {\n    return suggestion;\n  }\n\n  renderSuggestion(suggestion) {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, suggestion);\n  }\n\n  render() {\n    const _this$state = this.state,\n          loading = _this$state.loading,\n          trafficToggle = _this$state.trafficToggle,\n          roads = _this$state.roads,\n          roadways = _this$state.roadways,\n          camIndex = _this$state.camIndex,\n          currentRoadway = _this$state.currentRoadway,\n          suggestions = _this$state.suggestions,\n          value = _this$state.value;\n    const inputProps = {\n      placeholder: \"Enter a road...\",\n      value,\n      onChange: this.onChange\n    };\n    return React.createElement(\"div\", {\n      className: \"traffic__wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"traffic-intro__wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, !loading === false ? React.createElement(Loading, {\n      template: \"traffic-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }) : React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"title-block light clickable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Traffic\")), React.createElement(\"div\", {\n      className: \"camera-select__wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      onChange: this.handleSelectChange,\n      value: this.currentRoadway,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, roadways.map((roadway, index) => roadway === null ? null : React.createElement(\"option\", {\n      key: index,\n      value: roadway,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, roadway))), React.createElement(\"span\", {\n      className: \"helper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    })))), !loading === false ? React.createElement(Loading, {\n      template: \"camera-jump\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      className: \"camera-jump__wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      onSuggestionSelected: this.onSuggestionSelected,\n      getSuggestionValue: this.getSuggestionValue,\n      renderSuggestion: this.renderSuggestion,\n      inputProps: inputProps,\n      focusInputOnSuggestionClick: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    })), React.createElement(TrafficCameras, {\n      roads: roads,\n      camIndex: camIndex,\n      ref: this.cameraElement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/aundrekerr/Projects/React2019/cp24/src/components/Traffic.js"],"names":["React","Autosuggest","Loading","TrafficCameras","fetchCameras","Traffic","Component","constructor","props","state","loading","cameras","camIndex","roadways","roads","currentRoadway","value","suggestions","trafficToggle","handleSelectChange","event","newRoads","filter","cam","RoadwayName","target","Organization","setState","onChange","newValue","method","onSuggestionsFetchRequested","roadNames","map","road","Name","getSuggestions","onSuggestionsClearRequested","onSuggestionSelected","suggestionValue","newIndex","findIndex","e","console","log","cameraElement","createRef","componentDidMount","then","data","cams","Set","componentDidUpdate","current","changeCameraIndex","getInitialState","inputValue","trim","toLowerCase","x","includes","getSuggestionValue","suggestion","renderSuggestion","render","inputProps","placeholder","roadway","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Loading from './loading/Loading.js';\nimport TrafficCameras from './traffic/TrafficCameras.js';\n\nimport { fetchCameras } from '../utils/api';\n\nimport '../styles/components/traffic/_traffic.scss';\nimport '../styles/components/traffic/_camera-select.scss';\n\n/**\n * Component responsible for rendering the traffic components.\n */\nexport default class Traffic extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.cameraElement = React.createRef();\n\t}\n\n\tstate = {\n\t\tloading: true,\n\t\tcameras: {},\n\t\tcamIndex: 0,\n\t\troadways: [],\n\t\troads: [],\n\t\tcurrentRoadway: 'select',\n\t\tvalue: '',\n\t\tsuggestions: [],\n\t\ttrafficToggle: 'cameras'\n\t}\n\n\tcomponentDidMount() {\n\t\tfetchCameras()\n\t\t\t.then((data) => {\n\t\t\t\tconst cams = data.filter(cam => cam.Organization === \"MTO\");\n\t\t\t\tconst roadways = [...(new Set(cams.map(({ RoadwayName }) => RoadwayName)))];\n\t\t\t\tconst roads = data.filter(cam => cam.RoadwayName === \"HWY 401\" && cam.Organization === \"MTO\");\n\t\t\t\tconst roadNames = roads.map(road => (road.Name))\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tloading: false,\n\t\t\t\t\tcameras: cams,\n\t\t\t\t\troadways: roadways,\n\t\t\t\t\troads: roads,\n\t\t\t\t\tcurrentRoadway: roadways[1],\n\t\t\t\t\tsuggestions: roadNames\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\tcomponentDidUpdate() {\n\t\tthis.cameraElement.current.changeCameraIndex(this.state.camIndex);\n\t}\n\n\thandleSelectChange = (event) => {\n\t\tconst newRoads = this.state.cameras.filter(cam => cam.RoadwayName === event.target.value && cam.Organization === \"MTO\");\n\t\t\n\t\tthis.setState({\n\t\t\troads: newRoads,\n\t\t\tcurrentRoadway: event.target.value,\n\t\t\tvalue: ''\n\t\t})\n\t}\n\n\tgetInitialState() {\n         return {\n             currentRoadway: 'select'\n         }\n     }\n\n\thandleSelectChange(event){\n\t\tconst newRoads = this.state.cameras.filter(cam => cam.RoadwayName === event.target.value && cam.Organization === \"MTO\");\n\n\t\tthis.setState({\n\t\t\troads: newRoads,\n\t\t\tcurrentRoadway: event.target.value,\n\t\t\tcamIndex: 0,\n\t\t\tvalue: ''\n\t\t})\n\t}\n\n\tonChange = (event, { newValue, method }) => {\n\t\tthis.setState({\n\t\t\tvalue: newValue\n\t\t});\n\t}\n\n\tonSuggestionsFetchRequested = ({ value }) => {\n\t\tconst roadNames = this.state.roads.map(road => (road.Name))\n\t\t\n\t\tthis.setState({\n\t\t\tsuggestions: this.getSuggestions(value, roadNames)\n\t\t});\n\t}\n\n\tonSuggestionsClearRequested = () => {\n\t\tthis.setState({\n\t\t\tsuggestions: []\n\t\t});\n\t}\n\n\tonSuggestionSelected = (event, {suggestionValue}) => {\n\t\tconst newIndex = this.state.roads.findIndex(e => e.Name === suggestionValue)\n\t\tconsole.log(newIndex)\n\t\tthis.setState({\n\t\t\tcamIndex: newIndex\n\t\t})\n\t}\n\n\tgetSuggestions(value, roads) {\n\t\tconst inputValue = value.trim().toLowerCase();\n\t\treturn roads.filter(x => x.toLowerCase().includes(inputValue.toLowerCase()));\n\t}\n\n\tgetSuggestionValue(suggestion) {\n\t\treturn suggestion;\n\t}\n\n\trenderSuggestion(suggestion) {\n\t\treturn (\n\t\t\t<span>{suggestion}</span>\n\t\t)\n\t}\n\n\trender() {\n\t\tconst { loading, trafficToggle, roads, roadways, camIndex, currentRoadway, suggestions, value } = this.state;\n\t\tconst inputProps = {\n\t\t\tplaceholder: \"Enter a road...\",\n\t\t\tvalue,\n\t\t\tonChange: this.onChange\n\t\t};\n\n\t\treturn (\n\t\t\t<div className=\"traffic__wrapper\">\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<div className='traffic-intro__wrapper'>\n\t\t\t\t\t{\n\t\t\t\t\t\t!loading === false \n\t\t\t\t\t\t\t? <Loading template='traffic-intro'/>\n\t\t\t\t\t\t\t: <React.Fragment>\n\t\t\t\t\t\t\t\t<h5 className='title-block light clickable'><span>Traffic</span></h5>\n\t\t\t\t\t\t\t\t<div className=\"camera-select__wrapper\">\n\t\t\t\t\t\t\t\t\t<select onChange={this.handleSelectChange} value={this.currentRoadway}>\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\troadways.map((roadway, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\troadway === null \n\t\t\t\t\t\t\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t\t\t\t\t\t\t: <option key={index} value={roadway}>{roadway}</option>\n\t\t\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t<span className=\"helper\"/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t{\n\t\t\t\t\t\t!loading === false\n\t\t\t\t\t\t? <Loading template='camera-jump' />\n\t\t\t\t\t\t: <div className=\"camera-jump__wrapper\">\n\t\t\t\t\t\t\t<Autosuggest \n\t\t\t\t\t\t\t\tsuggestions={suggestions}\n\t\t\t\t\t\t\t\tonSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n\t\t\t\t\t\t\t\tonSuggestionsClearRequested={this.onSuggestionsClearRequested}\n\t\t\t\t\t\t\t\tonSuggestionSelected={this.onSuggestionSelected}\n\t\t\t\t\t\t\t\tgetSuggestionValue={this.getSuggestionValue}\n\t\t\t\t\t\t\t\trenderSuggestion={this.renderSuggestion}\n\t\t\t\t\t\t\t\tinputProps={inputProps} \n\t\t\t\t\t\t\t\tfocusInputOnSuggestionClick={false}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\n\t\t\t\t\t<TrafficCameras \n\t\t\t\t\t\troads={roads}\n\t\t\t\t\t\tcamIndex={camIndex}\n\t\t\t\t\t\tref={this.cameraElement} />\n\t\t\t\t</React.Fragment>\n\t\t\t</div>\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}