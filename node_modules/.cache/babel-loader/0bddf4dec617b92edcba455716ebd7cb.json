{"ast":null,"code":"var _jsxFileName = \"/Users/aundrekerr/Projects/React2019/cp24/src/components/Weather.js\";\nimport React from 'react';\nimport Loading from './loading/Loading.js';\nimport DailyForecast from './weather/DailyForecast.js';\nimport WeeklyForecast from './weather/WeeklyForecast.js';\nimport CitySelect from './weather/CitySelect.js';\nimport { fetchForecast, fetchCityList } from '../utils/api';\nconst CitySelectContext = React.createContext();\n/**\n * Component responsible for rendering weather component.\n */\n\nexport default class Weather extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      forecastToggle: 'week',\n      weekForecast: null,\n      dayForecast: null,\n      cityList: null,\n      currentLocationId: 6167865\n    };\n\n    this.toggleForecast = () => {\n      this.setState(({\n        forecastToggle\n      }) => ({\n        forecastToggle: forecastToggle === 'day' ? 'week' : 'day'\n      }));\n    };\n\n    this.changeCity = e => {\n      this.setState({\n        currentLocationId: e.target.value\n      });\n      /** Grabs forecast data for the day and week. **/\n\n      fetchForecast(parseInt(e.target.value)).then(forecast => {\n        /** Filter out forecasts for the day. **/\n        const day = forecast.list.filter(function (value, index, Arr) {\n          return index % 2 === 0;\n        });\n        day.length = 5;\n        this.setState({\n          dayForecast: day\n        });\n        /** Filter out forecasts for the week. **/\n\n        const firstHour = new Date(forecast.list[0].dt * 1000).getHours();\n        const week = forecast.list.filter(obj => {\n          const date = new Date(obj.dt * 1000);\n          const hour = date.getHours();\n\n          if (firstHour <= 5 && firstHour >= 19) {\n            if (hour === firstHour) {\n              return obj;\n            }\n          } else {\n            if (hour === 17) {\n              return obj;\n            }\n          }\n        });\n        this.setState({\n          weekForecast: week\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    /** Gets list of cities for <select> element.  **/\n    fetchCityList().then(data => {\n      this.setState({\n        cityList: data\n      });\n    });\n    /** Grabs forecast data for the day and week. **/\n\n    fetchForecast(this.state.currentLocationId).then(forecast => {\n      /** Filter out forecasts for the day. **/\n      const day = forecast.list.filter(function (value, index, Arr) {\n        return index % 2 === 0;\n      });\n      day.length = 5;\n      this.setState({\n        dayForecast: day\n      });\n      /** Filter out forecasts for the week. **/\n\n      const firstHour = new Date(forecast.list[0].dt * 1000).getHours();\n      const week = forecast.list.filter(obj => {\n        const date = new Date(obj.dt * 1000);\n        const hour = date.getHours();\n\n        if (firstHour <= 5 && firstHour >= 19) {\n          if (hour === firstHour) {\n            return obj;\n          }\n        } else {\n          if (hour === 17) {\n            return obj;\n          }\n        }\n      });\n      this.setState({\n        weekForecast: week\n      });\n    });\n  }\n  /** Toggle the forecast displayed. **/\n\n\n  render() {\n    const _this$state = this.state,\n          forecastToggle = _this$state.forecastToggle,\n          weekForecast = _this$state.weekForecast,\n          dayForecast = _this$state.dayForecast,\n          currentLocationId = _this$state.currentLocationId,\n          cityList = _this$state.cityList,\n          checkTime = _this$state.checkTime,\n          changeCity = _this$state.changeCity;\n    return React.createElement(\"div\", {\n      className: \"forecast__wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(CitySelectContext.Provider, {\n      value: this.state.currentLocationId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, cityList === null ? React.createElement(Loading, {\n      template: \"forecast-city-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      className: \"city-select__wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, forecastToggle === 'week' ? React.createElement(\"h5\", {\n      className: \"title-block light clickable\",\n      onClick: this.toggleForecast,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Forecast - Weekly\")) : React.createElement(\"h5\", {\n      className: \"title-block light clickable\",\n      onClick: this.toggleForecast,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Forecast - Daily\")), React.createElement(CitySelect, {\n      cityList: cityList,\n      currentLocation: currentLocationId,\n      changeCity: this.changeCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }))), forecastToggle === 'day' ? dayForecast === null ? React.createElement(Loading, {\n      template: \"forecast-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }) : React.createElement(DailyForecast, {\n      forecast: dayForecast,\n      checkTime: this.checkTime,\n      toggleForecast: this.toggleForecast,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }) : weekForecast === null ? React.createElement(Loading, {\n      template: \"forecast-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }) : React.createElement(WeeklyForecast, {\n      forecast: weekForecast,\n      checkTime: this.checkTime,\n      toggleForecast: this.toggleForecast,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/aundrekerr/Projects/React2019/cp24/src/components/Weather.js"],"names":["React","Loading","DailyForecast","WeeklyForecast","CitySelect","fetchForecast","fetchCityList","CitySelectContext","createContext","Weather","Component","state","forecastToggle","weekForecast","dayForecast","cityList","currentLocationId","toggleForecast","setState","changeCity","e","target","value","parseInt","then","forecast","day","list","filter","index","Arr","length","firstHour","Date","dt","getHours","week","obj","date","hour","componentDidMount","data","render","checkTime"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Loading from './loading/Loading.js';\nimport DailyForecast from './weather/DailyForecast.js';\nimport WeeklyForecast from './weather/WeeklyForecast.js';\nimport CitySelect from './weather/CitySelect.js';\n\nimport { fetchForecast, fetchCityList } from '../utils/api';\n\n\nconst CitySelectContext = React.createContext();\n\n/**\n * Component responsible for rendering weather component.\n */\nexport default class Weather extends React.Component {\n\t\n\t/** Default location id is Toronto.  **/\n\tstate = {\n\t\tforecastToggle: 'week',\n\t\tweekForecast: null,\n\t\tdayForecast: null,\n\t\tcityList: null,\n\t\tcurrentLocationId: 6167865 \n\t}\n\n\tcomponentDidMount() {\n\t\t/** Gets list of cities for <select> element.  **/\n\t\tfetchCityList()\n\t\t\t.then((data) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tcityList: data\n\t\t\t\t})\n\t\t\t})\n\n\t\t/** Grabs forecast data for the day and week. **/\n\t\tfetchForecast(this.state.currentLocationId)\n\t\t\t.then((forecast) => {\n\n\t\t\t\t/** Filter out forecasts for the day. **/\n\t\t\t\tconst day = forecast.list.filter(function(value, index, Arr) {\n\t\t\t\t\treturn index % 2 === 0;\n\t\t\t\t});\n\n\t\t\t\tday.length = 5;\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tdayForecast: day\n\t\t\t\t});\n\n\t\t\t\t/** Filter out forecasts for the week. **/\n\t\t\t\tconst firstHour = (new Date(forecast.list[0].dt * 1000)).getHours();\n\n\t\t\t\tconst week = (forecast.list).filter(obj => {\n\t\t\t\t\tconst date = new Date(obj.dt * 1000)\n\t\t\t\t\tconst hour = date.getHours();\n\n\t\t\t\t\tif (firstHour <= 5 && firstHour >= 19) {\n\t\t\t\t\t\tif (hour === firstHour){ return obj; }\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (hour === 17){ return obj; }\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tweekForecast: week\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\t/** Toggle the forecast displayed. **/\n\ttoggleForecast = () => {\n\t\tthis.setState(({forecastToggle}) => ({\n\t\t\tforecastToggle: forecastToggle === 'day' ? 'week' : 'day'\n\t\t}))\n\t}\n\n\t/** Handle changing the city displayed. **/\n\tchangeCity = (e) => {\n\t\tthis.setState({\n\t\t\tcurrentLocationId: e.target.value\n\t\t});\n\n\t\t/** Grabs forecast data for the day and week. **/\n\t\tfetchForecast(parseInt(e.target.value))\n\t\t\t.then((forecast) => {\n\n\t\t\t\t/** Filter out forecasts for the day. **/\n\t\t\t\tconst day = forecast.list.filter(function(value, index, Arr) {\n\t\t\t\t\treturn index % 2 === 0;\n\t\t\t\t});\n\n\t\t\t\tday.length = 5;\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tdayForecast: day\n\t\t\t\t});\n\n\t\t\t\t/** Filter out forecasts for the week. **/\n\t\t\t\tconst firstHour = (new Date(forecast.list[0].dt * 1000)).getHours();\n\n\t\t\t\tconst week = (forecast.list).filter(obj => {\n\t\t\t\t\tconst date = new Date(obj.dt * 1000)\n\t\t\t\t\tconst hour = date.getHours();\n\n\t\t\t\t\tif (firstHour <= 5 && firstHour >= 19) {\n\t\t\t\t\t\tif (hour === firstHour){ return obj; }\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (hour === 17){ return obj; }\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tweekForecast: week\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\trender() {\n\t\tconst { forecastToggle, weekForecast, dayForecast, currentLocationId, cityList, checkTime, changeCity } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"forecast__wrapper\">\n\t\t\t\t<CitySelectContext.Provider value={this.state.currentLocationId}>\n\t\t\t\t\t{ \n\t\t\t\t\t\tcityList === null\n\t\t\t\t\t\t\t? <Loading template='forecast-city-select'/>\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t: <div className=\"city-select__wrapper\">\n\t\t\t\t\t\t\t\t{ forecastToggle === 'week'\n\t\t\t\t\t\t\t\t\t? <h5 className='title-block light clickable' onClick={this.toggleForecast}><span>Forecast - Weekly</span></h5>\n\t\t\t\t\t\t\t\t\t: <h5 className='title-block light clickable' onClick={this.toggleForecast}><span>Forecast - Daily</span></h5>\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t<CitySelect \n\t\t\t\t\t\t\t\t\tcityList={cityList} \n\t\t\t\t\t\t\t\t\tcurrentLocation={currentLocationId} \n\t\t\t\t\t\t\t\t\tchangeCity={this.changeCity} /> \n\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t}\n\t\t\t\t</CitySelectContext.Provider>\n\t\t\t\t{ \n\t\t\t\t\tforecastToggle === 'day'\n\t\t\t\t\t\t? dayForecast === null \n\t\t\t\t\t\t\t? <Loading template='forecast-list'/>\n\t\t\t\t\t\t\t: <DailyForecast \n\t\t\t\t\t\t\t\tforecast={dayForecast} \n\t\t\t\t\t\t\t\tcheckTime={this.checkTime} \n\t\t\t\t\t\t\t\ttoggleForecast={this.toggleForecast} /> \n\t\t\t\t\t\t: weekForecast === null \n\t\t\t\t\t\t\t? <Loading template='forecast-list'/>\n\t\t\t\t\t\t\t: <WeeklyForecast \n\t\t\t\t\t\t\t\tforecast={weekForecast} \n\t\t\t\t\t\t\t\tcheckTime={this.checkTime} \n\t\t\t\t\t\t\t\ttoggleForecast={this.toggleForecast} /> \n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}