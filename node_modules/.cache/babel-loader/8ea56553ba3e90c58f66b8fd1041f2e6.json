{"ast":null,"code":"var _jsxFileName = \"/Users/aundrekerr/Projects/React2019/cp24/src/components/Weather.js\";\nimport React from 'react';\nimport DailyForecast from './weather/DailyForecast.js';\nimport WeeklyForecast from './weather/WeeklyForecast.js';\nimport CitySelect from './weather/CitySelect.js';\nimport Moment from 'react-moment';\nimport { fetchForecast, fetchCityList } from '../utils/api';\nconst CitySelectContext = React.createContext();\n/**\n * Component responsible for rendering weather component.\n */\n\nexport default class Weather extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      forecastToggle: 'week',\n      extraToggle: 'hide',\n      weekForecast: null,\n      dayForecast: null,\n      cityList: null,\n      currentLocationId: 6167865\n    };\n\n    this.toggleForecast = () => {\n      this.setState(({\n        forecastToggle\n      }) => ({\n        forecastToggle: forecastToggle === 'day' ? 'week' : 'day'\n      }));\n    };\n\n    this.toggleForecastExtra = () => {\n      this.setState(({\n        extraToggle\n      }) => ({\n        extraToggle: extraToggle === 'hide' ? 'show' : 'hide'\n      }));\n    };\n\n    this.checkTime = time => {\n      const date = new Date(time * 1000);\n      const hour = date.getHours();\n\n      switch (hour) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n          return 'NITE';\n\n        case 6:\n        case 7:\n        case 8:\n        case 9:\n        case 10:\n        case 11:\n        case 12:\n          return 'MORN';\n\n        case 13:\n        case 14:\n        case 15:\n        case 16:\n        case 17:\n        case 18:\n        case 19:\n          return 'AFT';\n\n        case 20:\n        case 21:\n        case 22:\n        case 23:\n        case 24:\n        case 25:\n        case 26:\n          return 'EVE';\n\n        /** Need a better default. **/\n\n        default:\n          return \"YERRRRRR\";\n      }\n    };\n\n    this.changeCity = e => {\n      this.setState({\n        currentLocationId: e.target.value\n      }); // console.log(e.target.value, this.state.currentLocationId)\n\n      /** Grabs forecast data for the day and week. **/\n      // fetchForecast(this.state.currentLocationId)\n\n      fetchForecast(parseInt(e.target.value)).then(forecast => {\n        // console.log(day)\n\n        /** Filter out forecasts for the day. **/\n        const day = forecast.list.filter(function (value, index, Arr) {\n          return index % 2 === 0;\n        });\n        day.length = 5;\n        this.setState({\n          dayForecast: day\n        });\n        /** TIMEZONES ARE FUCKED, FAM. GOTTA FIX THIS SHIT. **/\n\n        /** Filter out forecasts for the week. **/\n\n        const firstHour = new Date(forecast.list[0].dt * 1000).getHours();\n        const week = forecast.list.filter(obj => {\n          const date = new Date(obj.dt * 1000);\n          const hour = date.getHours(); // if (hour === firstHour){ return obj; }\n\n          if (firstHour <= 5 && firstHour >= 19) {\n            if (hour === firstHour) {\n              return obj;\n            }\n          } else {\n            if (hour === 17) {\n              return obj;\n            }\n          }\n        });\n        this.setState({\n          weekForecast: week\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    /** Gets list of cities for <select> element.  **/\n    fetchCityList().then(data => {\n      this.setState({\n        cityList: data\n      });\n    });\n    /** Grabs forecast data for the day and week. **/\n\n    fetchForecast(this.state.currentLocationId).then(forecast => {\n      /** Filter out forecasts for the day. **/\n      const day = forecast.list.filter(function (value, index, Arr) {\n        return index % 2 === 0;\n      });\n      day.length = 5;\n      this.setState({\n        dayForecast: day\n      });\n      /** TIMEZONES ARE FUCKED, FAM. GOTTA FIX THIS SHIT. **/\n\n      /** Filter out forecasts for the week. Compare first hour to timeframe, if daytime, return timeframe. **/\n      // const firstHour = (new Date(forecast.list[0].dt * 1000)).getHours();\n      // const week = (forecast.list).filter(obj => {\n      // \tconst date = new Date(obj.dt * 1000)\n      // \tconst hour = date.getHours();\n      // \t// if (hour === firstHour){ return obj; }\n      // \tif (firstHour <= 5 && firstHour >= 19) {\n      // \t\tif (hour === firstHour){ return obj; }\n      // \t} else {\n      // \t\tif (hour === 11){ return obj; }\n      // \t}\n      // })\n      // week.map((day) => {\n      // \t// console.log(week)\n      // \t// console.log('after', new Date(day.dt * 1000).getHours())\n      // })\n\n      const week = forecast.list.filter(obj => {\n        const date = new Date(obj.dt * 1000);\n        const hour = date.getHours();\n\n        if (hour === 17) {\n          return obj;\n        }\n      });\n      /** TIMEZONES ARE FUCKED, FAM. GOTTA FIX THIS SHIT. **/\n\n      this.setState({\n        weekForecast: week\n      });\n    });\n  }\n  /** Toggle the forecast displayed. **/\n\n\n  render() {\n    const _this$state = this.state,\n          forecastToggle = _this$state.forecastToggle,\n          weekForecast = _this$state.weekForecast,\n          dayForecast = _this$state.dayForecast,\n          currentLocationId = _this$state.currentLocationId,\n          cityList = _this$state.cityList,\n          checkTime = _this$state.checkTime,\n          changeCity = _this$state.changeCity,\n          toggleForecastExtra = _this$state.toggleForecastExtra;\n    return React.createElement(\"div\", {\n      className: \"forecast__wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(CitySelectContext.Provider, {\n      value: this.state.currentLocationId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, cityList === null ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"loading\") : React.createElement(\"div\", {\n      className: \"city-select__wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, forecastToggle === 'week' ? React.createElement(\"h5\", {\n      className: \"title-block light clickable\",\n      onClick: this.toggleForecast,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Weekly Forecast\")) : React.createElement(\"h5\", {\n      className: \"title-block light clickable\",\n      onClick: this.toggleForecast,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Daily Forecast\")), React.createElement(CitySelect, {\n      cityList: cityList,\n      currentLocation: currentLocationId,\n      changeCity: this.changeCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }))), forecastToggle === 'day' ? dayForecast === null ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, \"loading day\") : React.createElement(DailyForecast, {\n      forecast: dayForecast,\n      checkTime: this.checkTime,\n      toggleForecast: this.toggleForecast,\n      forecastExtra: this.toggleForecastExtra,\n      toggleForecastExtra: this.toggleForecastExtra,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }) : weekForecast === null ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"loading week\") : React.createElement(WeeklyForecast, {\n      forecast: weekForecast,\n      toggleForecast: this.toggleForecast,\n      forecastExtra: this.toggleForecastExtra,\n      toggleForecastExtra: this.toggleForecastExtra,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/aundrekerr/Projects/React2019/cp24/src/components/Weather.js"],"names":["React","DailyForecast","WeeklyForecast","CitySelect","Moment","fetchForecast","fetchCityList","CitySelectContext","createContext","Weather","Component","state","forecastToggle","extraToggle","weekForecast","dayForecast","cityList","currentLocationId","toggleForecast","setState","toggleForecastExtra","checkTime","time","date","Date","hour","getHours","changeCity","e","target","value","parseInt","then","forecast","day","list","filter","index","Arr","length","firstHour","dt","week","obj","componentDidMount","data","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DailyForecast from './weather/DailyForecast.js';\nimport WeeklyForecast from './weather/WeeklyForecast.js';\nimport CitySelect from './weather/CitySelect.js';\nimport Moment from 'react-moment';\n\nimport { fetchForecast, fetchCityList } from '../utils/api';\n\n\nconst CitySelectContext = React.createContext();\n\n/**\n * Component responsible for rendering weather component.\n */\nexport default class Weather extends React.Component {\n\t\n\t/** Default location id is Toronto.  **/\n\tstate = {\n\t\tforecastToggle: 'week',\n\t\textraToggle: 'hide',\n\t\tweekForecast: null,\n\t\tdayForecast: null,\n\t\tcityList: null,\n\t\tcurrentLocationId: 6167865 \n\t}\n\n\tcomponentDidMount() {\n\t\t/** Gets list of cities for <select> element.  **/\n\t\tfetchCityList()\n\t\t\t.then((data) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tcityList: data\n\t\t\t\t})\n\t\t\t})\n\n\t\t/** Grabs forecast data for the day and week. **/\n\t\tfetchForecast(this.state.currentLocationId)\n\t\t\t.then((forecast) => {\n\n\t\t\t\t/** Filter out forecasts for the day. **/\n\t\t\t\tconst day = forecast.list.filter(function(value, index, Arr) {\n\t\t\t\t\treturn index % 2 === 0;\n\t\t\t\t});\n\n\t\t\t\tday.length = 5;\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tdayForecast: day\n\t\t\t\t});\n\n\t\t\t\t/** TIMEZONES ARE FUCKED, FAM. GOTTA FIX THIS SHIT. **/\n\t\t\t\t/** Filter out forecasts for the week. Compare first hour to timeframe, if daytime, return timeframe. **/\n\t\t\t\t// const firstHour = (new Date(forecast.list[0].dt * 1000)).getHours();\n\n\t\t\t\t// const week = (forecast.list).filter(obj => {\n\t\t\t\t// \tconst date = new Date(obj.dt * 1000)\n\t\t\t\t// \tconst hour = date.getHours();\n\t\t\t\t// \t// if (hour === firstHour){ return obj; }\n\n\t\t\t\t// \tif (firstHour <= 5 && firstHour >= 19) {\n\t\t\t\t// \t\tif (hour === firstHour){ return obj; }\n\t\t\t\t// \t} else {\n\t\t\t\t// \t\tif (hour === 11){ return obj; }\n\t\t\t\t// \t}\n\t\t\t\t// })\n\n\t\t\t\t// week.map((day) => {\n\t\t\t\t// \t// console.log(week)\n\t\t\t\t// \t// console.log('after', new Date(day.dt * 1000).getHours())\n\t\t\t\t// })\n\n\t\t\t\tconst week = (forecast.list).filter(obj => {\n\t\t\t\t\tconst date = new Date(obj.dt * 1000)\n\t\t\t\t\tconst hour = date.getHours();\n\n\t\t\t\t\tif (hour === 17){ return obj; }\n\t\t\t\t})\n\n\t\t\t\t/** TIMEZONES ARE FUCKED, FAM. GOTTA FIX THIS SHIT. **/\n\t\t\t\tthis.setState({\n\t\t\t\t\tweekForecast: week\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\t/** Toggle the forecast displayed. **/\n\ttoggleForecast = () => {\n\t\tthis.setState(({forecastToggle}) => ({\n\t\t\tforecastToggle: forecastToggle === 'day' ? 'week' : 'day'\n\t\t}))\n\t}\n\n\t/** Toggle the forecast's deep information display. **/\n\ttoggleForecastExtra = () => {\n\t\tthis.setState(({extraToggle}) => ({\n\t\t\textraToggle: extraToggle === 'hide' ? 'show' : 'hide'\n\t\t}))\n\t}\n\n\t/** Sets the forecast timeframe's title depending on time returned. **/\n\tcheckTime = (time) => {\n\t\tconst date = new Date(time * 1000)\n\t\tconst hour = date.getHours();\n\n\t\tswitch (hour){\n\t\t\tcase 0: \n\t\t\tcase 1: \n\t\t\tcase 2: \n\t\t\tcase 3: \n\t\t\tcase 4: \n\t\t\tcase 5: \n\t\t\t\treturn 'NITE';\n\n\t\t\tcase 6: \n\t\t\tcase 7: \n\t\t\tcase 8: \n\t\t\tcase 9: \n\t\t\tcase 10: \n\t\t\tcase 11: \n\t\t\tcase 12: \n\t\t\t\treturn 'MORN';\n\t\t\t\n\t\t\tcase 13: \n\t\t\tcase 14: \n\t\t\tcase 15: \n\t\t\tcase 16: \n\t\t\tcase 17: \n\t\t\tcase 18: \n\t\t\tcase 19: \n\t\t\t\treturn 'AFT';\n\t\t\t\n\t\t\tcase 20: \n\t\t\tcase 21: \n\t\t\tcase 22: \n\t\t\tcase 23: \n\t\t\tcase 24: \n\t\t\tcase 25: \n\t\t\tcase 26: \n\t\t\t\treturn 'EVE';\n\n\t\t\t/** Need a better default. **/\n\t\t\tdefault:\n\t\t\t\treturn \"YERRRRRR\"\n\n\t\t}\n\t}\n\n\t/** Handle changing the city displayed. **/\n\tchangeCity = (e) => {\n\t\tthis.setState({\n\t\t\tcurrentLocationId: e.target.value\n\t\t});\n\t\t// console.log(e.target.value, this.state.currentLocationId)\n\n\t\t/** Grabs forecast data for the day and week. **/\n\t\t// fetchForecast(this.state.currentLocationId)\n\t\tfetchForecast(parseInt(e.target.value))\n\t\t\t.then((forecast) => {\n\n\t\t\t\t// console.log(day)\n\n\t\t\t\t/** Filter out forecasts for the day. **/\n\t\t\t\tconst day = forecast.list.filter(function(value, index, Arr) {\n\t\t\t\t\treturn index % 2 === 0;\n\t\t\t\t});\n\n\t\t\t\tday.length = 5;\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tdayForecast: day\n\t\t\t\t});\n\n\t\t\t\t/** TIMEZONES ARE FUCKED, FAM. GOTTA FIX THIS SHIT. **/\n\t\t\t\t/** Filter out forecasts for the week. **/\n\t\t\t\tconst firstHour = (new Date(forecast.list[0].dt * 1000)).getHours();\n\n\t\t\t\tconst week = (forecast.list).filter(obj => {\n\t\t\t\t\tconst date = new Date(obj.dt * 1000)\n\t\t\t\t\tconst hour = date.getHours();\n\t\t\t\t\t// if (hour === firstHour){ return obj; }\n\n\t\t\t\t\tif (firstHour <= 5 && firstHour >= 19) {\n\t\t\t\t\t\tif (hour === firstHour){ return obj; }\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (hour === 17){ return obj; }\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tweekForecast: week\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\trender() {\n\t\tconst { forecastToggle, weekForecast, dayForecast, currentLocationId, cityList, checkTime, changeCity, toggleForecastExtra } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"forecast__wrapper\">\n\t\t\t\t<CitySelectContext.Provider value={this.state.currentLocationId}>\n\t\t\t\t\t{ \n\t\t\t\t\t\tcityList === null\n\t\t\t\t\t\t\t? <p>loading</p>\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t: <div className=\"city-select__wrapper\">\n\t\t\t\t\t\t\t\t{ forecastToggle === 'week'\n\t\t\t\t\t\t\t\t\t? <h5 className='title-block light clickable' onClick={this.toggleForecast}><span>Weekly Forecast</span></h5>\n\t\t\t\t\t\t\t\t\t: <h5 className='title-block light clickable' onClick={this.toggleForecast}><span>Daily Forecast</span></h5>\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t<CitySelect \n\t\t\t\t\t\t\t\t\t\tcityList={cityList} \n\t\t\t\t\t\t\t\t\t\tcurrentLocation={currentLocationId} \n\t\t\t\t\t\t\t\t\t\tchangeCity={this.changeCity} /> \n\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t}\n\t\t\t\t</CitySelectContext.Provider>\n\t\t\t\t{ \n\t\t\t\t\tforecastToggle === 'day'\n\t\t\t\t\t\t? dayForecast === null \n\t\t\t\t\t\t\t? <p>loading day</p> \n\t\t\t\t\t\t\t: <DailyForecast \n\t\t\t\t\t\t\t\tforecast={dayForecast} \n\t\t\t\t\t\t\t\tcheckTime={this.checkTime} \n\t\t\t\t\t\t\t\ttoggleForecast={this.toggleForecast}\n\t\t\t\t\t\t\t\tforecastExtra={this.toggleForecastExtra}\n\t\t\t\t\t\t\t\ttoggleForecastExtra={this.toggleForecastExtra} /> \n\t\t\t\t\t\t: weekForecast === null \n\t\t\t\t\t\t\t? <p>loading week</p> \n\t\t\t\t\t\t\t: <WeeklyForecast \n\t\t\t\t\t\t\t\tforecast={weekForecast} \n\t\t\t\t\t\t\t\ttoggleForecast={this.toggleForecast}\n\t\t\t\t\t\t\t\tforecastExtra={this.toggleForecastExtra}\n\t\t\t\t\t\t\t\ttoggleForecastExtra={this.toggleForecastExtra} /> \n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}