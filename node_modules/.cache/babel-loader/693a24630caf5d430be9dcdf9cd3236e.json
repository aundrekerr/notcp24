{"ast":null,"code":"var _jsxFileName = \"/Users/aundrekerr/Projects/React2019/cp24/src/components/Weather.js\";\nimport React from 'react';\nimport DailyForecast from './weather/DailyForecast.js';\nimport WeeklyForecast from './weather/WeeklyForecast.js';\nimport CitySelect from './weather/CitySelect.js';\nimport { fetchWeekForecast, fetchForecast, fetchCityList } from '../utils/api';\nconst CitySelectContext = React.createContext();\n/**\n * Component responsible for rendering weather component.\n */\n\nexport default class Weather extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      forecastToggle: 'week',\n      weekForecast: null,\n      dayForecast: null,\n      cityList: null,\n      currentLocationId: 6167865\n    };\n\n    this.toggleForecast = () => {\n      this.setState(({\n        forecastToggle\n      }) => ({\n        forecastToggle: forecastToggle === 'day' ? 'week' : 'day'\n      }));\n      console.log(this.state.forecastToggle);\n    };\n\n    this.checkTime = time => {\n      const date = new Date(time * 1000);\n      const hour = date.getHours();\n\n      switch (hour) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n          return 'NITE';\n\n        case 6:\n        case 7:\n        case 8:\n        case 9:\n        case 10:\n        case 11:\n        case 12:\n          return 'MORN';\n\n        case 13:\n        case 14:\n        case 15:\n        case 16:\n        case 17:\n        case 18:\n        case 19:\n          return 'AFT';\n\n        case 20:\n        case 21:\n        case 22:\n        case 23:\n        case 24:\n        case 25:\n        case 26:\n          return 'EVE';\n\n        /** Need a better default. **/\n\n        default:\n          return \"YERRRRRR\";\n      }\n    };\n\n    this.changeCity = e => {\n      this.setState({\n        currentLocationId: e.target.value\n      });\n      /** Grabs forecast data for the day and week. **/\n\n      fetchForecast(this.state.currentLocationId).then(forecast => {\n        /** Filter out forecasts for the day. **/\n        const day = forecast.list.filter(function (value, index, Arr) {\n          return index % 2 === 0;\n        });\n        day.length = 5;\n        this.setState({\n          dayForecast: day\n        });\n        /** Filter out forecasts for the week. **/\n\n        const week = forecast.list.filter(obj => {\n          const date = new Date(obj.dt * 1000);\n          const hour = date.getHours();\n\n          if (hour === 8) {\n            return obj;\n          }\n        });\n        this.setState({\n          weekForecast: week\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    /** Gets list of cities for <select> element.  **/\n    fetchCityList().then(data => {\n      this.setState({\n        cityList: data\n      });\n    });\n    /** Grabs forecast data for the day and week. **/\n\n    fetchForecast(this.state.currentLocationId).then(forecast => {\n      /** Filter out forecasts for the day. **/\n      const day = forecast.list.filter(function (value, index, Arr) {\n        return index % 2 === 0;\n      });\n      day.length = 5;\n      this.setState({\n        dayForecast: day\n      });\n      /** Filter out forecasts for the week. **/\n\n      const firstHour = new Date(forecast.list[0].dt * 1000).getHours();\n      const week = forecast.list.filter(obj => {\n        const date = new Date(obj.dt * 1000);\n        const hour = date.getHours(); // console.log(hour)\n\n        if (hour === firstHour) {\n          return obj;\n        }\n      });\n      this.setState({\n        weekForecast: week\n      });\n    });\n  }\n  /** Toggle the forecast displayed. **/\n\n\n  render() {\n    const _this$state = this.state,\n          forecastToggle = _this$state.forecastToggle,\n          weekForecast = _this$state.weekForecast,\n          dayForecast = _this$state.dayForecast,\n          currentLocationId = _this$state.currentLocationId,\n          cityList = _this$state.cityList,\n          checkTime = _this$state.checkTime,\n          changeCity = _this$state.changeCity;\n    return React.createElement(\"div\", {\n      className: \"forecast__wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, forecastToggle === 'day' ? dayForecast === null ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"loading day\") : React.createElement(DailyForecast, {\n      forecast: dayForecast,\n      checkTime: this.checkTime,\n      toggleForecast: this.toggleForecast,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }) : weekForecast === null ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"loading week\") : React.createElement(WeeklyForecast, {\n      forecast: weekForecast,\n      toggleForecast: this.toggleForecast,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(CitySelectContext.Provider, {\n      value: this.state.currentLocationId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, cityList === null ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"loading\") : React.createElement(CitySelect, {\n      cityList: cityList,\n      currentLocation: currentLocationId,\n      changeCity: this.changeCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/aundrekerr/Projects/React2019/cp24/src/components/Weather.js"],"names":["React","DailyForecast","WeeklyForecast","CitySelect","fetchWeekForecast","fetchForecast","fetchCityList","CitySelectContext","createContext","Weather","Component","state","forecastToggle","weekForecast","dayForecast","cityList","currentLocationId","toggleForecast","setState","console","log","checkTime","time","date","Date","hour","getHours","changeCity","e","target","value","then","forecast","day","list","filter","index","Arr","length","week","obj","dt","componentDidMount","data","firstHour","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DailyForecast from './weather/DailyForecast.js';\nimport WeeklyForecast from './weather/WeeklyForecast.js';\nimport CitySelect from './weather/CitySelect.js';\n\nimport { fetchWeekForecast, fetchForecast, fetchCityList } from '../utils/api';\n\n\nconst CitySelectContext = React.createContext();\n\n/**\n * Component responsible for rendering weather component.\n */\nexport default class Weather extends React.Component {\n\t/** Default location id is Toronto.  **/\n\tstate = {\n\t\tforecastToggle: 'week',\n\t\tweekForecast: null,\n\t\tdayForecast: null,\n\t\tcityList: null,\n\t\tcurrentLocationId: 6167865 \n\t}\n\n\tcomponentDidMount() {\n\t\t/** Gets list of cities for <select> element.  **/\n\t\tfetchCityList()\n\t\t\t.then((data) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tcityList: data\n\t\t\t\t})\n\t\t\t})\n\n\t\t/** Grabs forecast data for the day and week. **/\n\t\tfetchForecast(this.state.currentLocationId)\n\t\t\t.then((forecast) => {\n\n\t\t\t\t/** Filter out forecasts for the day. **/\n\t\t\t\tconst day = forecast.list.filter(function(value, index, Arr) {\n\t\t\t\t\treturn index % 2 === 0;\n\t\t\t\t});\n\n\t\t\t\tday.length = 5;\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tdayForecast: day\n\t\t\t\t});\n\n\t\t\t\t/** Filter out forecasts for the week. **/\n\t\t\t\tconst firstHour = (new Date(forecast.list[0].dt * 1000)).getHours();\n\n\t\t\t\tconst week = (forecast.list).filter(obj => {\n\t\t\t\t\tconst date = new Date(obj.dt * 1000)\n\t\t\t\t\tconst hour = date.getHours();\n\t\t\t\t\t// console.log(hour)\n\n\t\t\t\t\tif (hour === firstHour){ return obj; }\n\t\t\t\t})\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tweekForecast: week\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\t/** Toggle the forecast displayed. **/\n\ttoggleForecast = () => {\n\t\tthis.setState(({forecastToggle}) => ({\n\t\t\tforecastToggle: forecastToggle === 'day' ? 'week' : 'day'\n\t\t}))\n\t\tconsole.log(this.state.forecastToggle)\n\t}\n\n\t/** Sets the forecast timeframe's title depending on time returned. **/\n\tcheckTime = (time) => {\n\t\tconst date = new Date(time * 1000)\n\t\tconst hour = date.getHours();\n\n\t\tswitch (hour){\n\t\t\tcase 0: \n\t\t\tcase 1: \n\t\t\tcase 2: \n\t\t\tcase 3: \n\t\t\tcase 4: \n\t\t\tcase 5: \n\t\t\t\treturn 'NITE';\n\n\t\t\tcase 6: \n\t\t\tcase 7: \n\t\t\tcase 8: \n\t\t\tcase 9: \n\t\t\tcase 10: \n\t\t\tcase 11: \n\t\t\tcase 12: \n\t\t\t\treturn 'MORN';\n\t\t\t\n\t\t\tcase 13: \n\t\t\tcase 14: \n\t\t\tcase 15: \n\t\t\tcase 16: \n\t\t\tcase 17: \n\t\t\tcase 18: \n\t\t\tcase 19: \n\t\t\t\treturn 'AFT';\n\t\t\t\n\t\t\tcase 20: \n\t\t\tcase 21: \n\t\t\tcase 22: \n\t\t\tcase 23: \n\t\t\tcase 24: \n\t\t\tcase 25: \n\t\t\tcase 26: \n\t\t\t\treturn 'EVE';\n\n\t\t\t/** Need a better default. **/\n\t\t\tdefault:\n\t\t\t\treturn \"YERRRRRR\"\n\n\t\t}\n\t}\n\n\t/** Handle changing the city displayed. **/\n\tchangeCity = (e) => {\n\t\tthis.setState({\n\t\t\tcurrentLocationId: e.target.value\n\t\t});\n\n\t\t/** Grabs forecast data for the day and week. **/\n\t\tfetchForecast(this.state.currentLocationId)\n\t\t\t.then((forecast) => {\n\n\t\t\t\t/** Filter out forecasts for the day. **/\n\t\t\t\tconst day = forecast.list.filter(function(value, index, Arr) {\n\t\t\t\t\treturn index % 2 === 0;\n\t\t\t\t});\n\n\t\t\t\tday.length = 5;\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tdayForecast: day\n\t\t\t\t});\n\n\t\t\t\t/** Filter out forecasts for the week. **/\n\t\t\t\tconst week = (forecast.list).filter(obj => {\n\t\t\t\t\tconst date = new Date(obj.dt * 1000)\n\t\t\t\t\tconst hour = date.getHours();\n\n\t\t\t\t\tif (hour === 8){ return obj; }\n\t\t\t\t})\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tweekForecast: week\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\trender() {\n\t\tconst { forecastToggle, weekForecast, dayForecast, currentLocationId, cityList, checkTime, changeCity } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"forecast__wrapper\">\n\t\t\t\t{ \n\t\t\t\t\tforecastToggle === 'day'\n\t\t\t\t\t\t? dayForecast === null ? <p>loading day</p> : <DailyForecast forecast={dayForecast} checkTime={this.checkTime} toggleForecast={this.toggleForecast} /> \n\t\t\t\t\t\t: weekForecast === null ? <p>loading week</p> : <WeeklyForecast forecast={weekForecast} toggleForecast={this.toggleForecast} /> \n\t\t\t\t}\n\n\t\t\t\t<CitySelectContext.Provider value={this.state.currentLocationId}>\n\t\t\t\t\t{ cityList === null ? <p>loading</p> : <CitySelect cityList={cityList} currentLocation={currentLocationId} changeCity={this.changeCity} /> }\n\t\t\t\t</CitySelectContext.Provider>\n\t\t\t</div>\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}