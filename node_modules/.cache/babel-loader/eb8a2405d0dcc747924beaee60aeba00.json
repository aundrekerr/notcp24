{"ast":null,"code":"var _jsxFileName = \"/Users/aundrekerr/Projects/React2019/cp24/src/components/Traffic.js\";\nimport React from 'react';\nimport TrafficCameras from './traffic/TrafficCameras.js';\nimport { fetchCameras } from '../utils/api';\nimport '../styles/components/traffic/_traffic.scss';\n/**\n * Component responsible for rendering the traffic components.\n */\n\nexport default class Traffic extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      cameras: {},\n      camIndex: 0,\n      roadways: [],\n      roads: [],\n      currentRoadway: 'select',\n      value: '',\n      suggestions: [],\n      trafficToggle: 'cameras'\n    };\n\n    this.camIndexStart = index => {\n      if (index > 0) {\n        return index - 1;\n      }\n    };\n\n    this.camIndexEnd = index => {\n      if (index < this.state.roads.length) {\n        return index + 1;\n      }\n    };\n  }\n\n  componentDidMount() {\n    fetchCameras().then(data => {\n      const cams = data.filter(cam => cam.Organization === \"MTO\");\n      const roadways = [...new Set(cams.map(({\n        RoadwayName\n      }) => RoadwayName))];\n      const roads = data.filter(cam => cam.RoadwayName === \"HWY 401\" && cam.Organization === \"MTO\");\n      const roadNames = roads.map(road => road.Name);\n      this.setState({\n        loading: false,\n        cameras: cams,\n        roadways: roadways,\n        roads: roads,\n        currentRoadway: roadways[0],\n        suggestions: roadNames\n      });\n    });\n  } // camIndexCheck = (camIndex, position) => {\n  // \tif (position === 'start' && camIndex > 0) {\n  // \t\tthis.setState({\n  // \t\t\tcamIndex: camIndex - 1\n  // \t\t});\n  // \t\treturn true;\n  // \t}\n  // \tif (position === 'end' && camIndex < this.state.roads.length) {\n  // \t\tthis.setState({\n  // \t\t\tcamIndex: camIndex + 1\n  // \t\t});\n  // \t\treturn true;\n  // \t}\n  // \treturn false;\n  // }\n\n\n  render() {\n    const _this$state = this.state,\n          loading = _this$state.loading,\n          trafficToggle = _this$state.trafficToggle,\n          roads = _this$state.roads,\n          camIndex = _this$state.camIndex,\n          camIndexStart = _this$state.camIndexStart,\n          camIndexEnd = _this$state.camIndexEnd;\n    return React.createElement(\"div\", {\n      className: \"traffic__wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, !loading === false ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"loading traffic\") : trafficToggle === 'cameras' ? React.createElement(\"h5\", {\n      className: \"title-block light clickable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Traffic - Cameras\")) : React.createElement(\"h5\", {\n      className: \"title-block light clickable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Traffic - Routes\")), React.createElement(TrafficCameras, {\n      roads: roads,\n      camIndex: camIndex,\n      camIndexStart: this.camIndexStart,\n      camIndexEnd: this.camIndexEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/aundrekerr/Projects/React2019/cp24/src/components/Traffic.js"],"names":["React","TrafficCameras","fetchCameras","Traffic","Component","state","loading","cameras","camIndex","roadways","roads","currentRoadway","value","suggestions","trafficToggle","camIndexStart","index","camIndexEnd","length","componentDidMount","then","data","cams","filter","cam","Organization","Set","map","RoadwayName","roadNames","road","Name","setState","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TrafficCameras from './traffic/TrafficCameras.js';\n\nimport { fetchCameras } from '../utils/api';\n\nimport '../styles/components/traffic/_traffic.scss';\n\n/**\n * Component responsible for rendering the traffic components.\n */\nexport default class Traffic extends React.Component {\n\tstate = {\n\t\tloading: true,\n\t\tcameras: {},\n\t\tcamIndex: 0,\n\t\troadways: [],\n\t\troads: [],\n\t\tcurrentRoadway: 'select',\n\t\tvalue: '',\n\t\tsuggestions: [],\n\t\ttrafficToggle: 'cameras'\n\t}\n\n\tcomponentDidMount() {\n\t\tfetchCameras()\n\t\t\t.then((data) => {\n\t\t\t\tconst cams = data.filter(cam => cam.Organization === \"MTO\");\n\t\t\t\tconst roadways = [...(new Set(cams.map(({ RoadwayName }) => RoadwayName)))];\n\t\t\t\tconst roads = data.filter(cam => cam.RoadwayName === \"HWY 401\" && cam.Organization === \"MTO\");\n\t\t\t\tconst roadNames = roads.map(road => (road.Name))\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tloading: false,\n\t\t\t\t\tcameras: cams,\n\t\t\t\t\troadways: roadways,\n\t\t\t\t\troads: roads,\n\t\t\t\t\tcurrentRoadway: roadways[0],\n\t\t\t\t\tsuggestions: roadNames\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\t// camIndexCheck = (camIndex, position) => {\n\n\t// \tif (position === 'start' && camIndex > 0) {\n\t// \t\tthis.setState({\n\t// \t\t\tcamIndex: camIndex - 1\n\t// \t\t});\n\n\t// \t\treturn true;\n\t// \t}\n\n\t// \tif (position === 'end' && camIndex < this.state.roads.length) {\n\t// \t\tthis.setState({\n\t// \t\t\tcamIndex: camIndex + 1\n\t// \t\t});\n\n\t// \t\treturn true;\n\t// \t}\n\n\t// \treturn false;\n\t// }\n\n\n\tcamIndexStart = (index) => {\n\t\tif ( index > 0 ) { return index - 1; }\n\t}\n\tcamIndexEnd = (index) => {\n\t\tif (index < this.state.roads.length) { return index + 1; }\n\t}\n\n\trender() {\n\t\tconst { loading, trafficToggle, roads, camIndex, camIndexStart, camIndexEnd } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"traffic__wrapper\">\n\t\t\t\t<React.Fragment>\n\t\t\t\t{\n\t\t\t\t\t!loading === false \n\t\t\t\t\t? <p>loading traffic</p> \n\t\t\t\t\t: trafficToggle === 'cameras'\n\t\t\t\t\t\t? <h5 className='title-block light clickable'><span>Traffic - Cameras</span></h5>\n\t\t\t\t\t\t: <h5 className='title-block light clickable'><span>Traffic - Routes</span></h5>\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t<TrafficCameras \n\t\t\t\t\t\troads={roads} \n\t\t\t\t\t\tcamIndex={camIndex}\n\t\t\t\t\t\tcamIndexStart={this.camIndexStart} \n\t\t\t\t\t\tcamIndexEnd={this.camIndexEnd} />\n\t\t\t\t</React.Fragment>\n\t\t\t</div>\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}