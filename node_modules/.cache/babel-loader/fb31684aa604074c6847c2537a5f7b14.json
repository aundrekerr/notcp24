{"ast":null,"code":"var _jsxFileName = \"/Users/aundrekerr/Projects/React2019/cp24/src/components/Traffic.js\";\nimport React from 'react';\nimport TrafficCameras from './traffic/TrafficCameras.js';\nimport Autosuggest from 'react-autosuggest';\nimport { fetchCameras } from '../utils/api';\nimport '../styles/components/traffic/_traffic.scss';\nimport '../styles/components/traffic/_camera-select.scss';\n/**\n * Component responsible for rendering the traffic components.\n */\n\nexport default class Traffic extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSelectChange = event => {\n      const newRoads = this.state.cameras.filter(cam => cam.RoadwayName === event.target.value && cam.Organization === \"MTO\");\n      this.setState({\n        roads: newRoads,\n        currentRoadway: event.target.value,\n        value: ''\n      });\n    };\n\n    this.onChange = (event, {\n      newValue,\n      method\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      const roadNames = this.state.roads.map(road => road.Name);\n      this.setState({\n        suggestions: this.getSuggestions(value, roadNames)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.onSuggestionSelected = (event, {\n      suggestionValue\n    }) => {\n      console.log('traffic', this.myRef.current);\n      const newIndex = this.state.roads.findIndex(e => e.Name === suggestionValue);\n      this.setState({\n        camIndex: newIndex\n      });\n    };\n\n    this.state = {\n      loading: true,\n      cameras: {},\n      camIndex: 0,\n      roadways: [],\n      roads: [],\n      currentRoadway: 'select',\n      value: '',\n      suggestions: [],\n      trafficToggle: 'cameras'\n    };\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    fetchCameras().then(data => {\n      const cams = data.filter(cam => cam.Organization === \"MTO\");\n      const roadways = [...new Set(cams.map(({\n        RoadwayName\n      }) => RoadwayName))];\n      const roads = data.filter(cam => cam.RoadwayName === \"HWY 401\" && cam.Organization === \"MTO\");\n      const roadNames = roads.map(road => road.Name);\n      this.setState({\n        loading: false,\n        cameras: cams,\n        roadways: roadways,\n        roads: roads,\n        currentRoadway: roadways[0],\n        suggestions: roadNames\n      });\n    });\n  }\n\n  getSuggestions(value, roads) {\n    const inputValue = value.trim().toLowerCase();\n    return roads.filter(x => x.toLowerCase().includes(inputValue.toLowerCase()));\n  }\n\n  getSuggestionValue(suggestion) {\n    return suggestion;\n  }\n\n  renderSuggestion(suggestion) {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, suggestion);\n  }\n\n  render() {\n    const _this$state = this.state,\n          loading = _this$state.loading,\n          trafficToggle = _this$state.trafficToggle,\n          roads = _this$state.roads,\n          roadways = _this$state.roadways,\n          camIndex = _this$state.camIndex,\n          currentRoadway = _this$state.currentRoadway,\n          suggestions = _this$state.suggestions,\n          value = _this$state.value,\n          onChange = _this$state.onChange;\n    const inputProps = {\n      placeholder: \"Enter a road...\",\n      value,\n      onChange: this.onChange\n    };\n    return React.createElement(\"div\", {\n      className: \"traffic__wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, !loading === false ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"loading traffic\") : trafficToggle === 'cameras' ? React.createElement(\"h5\", {\n      className: \"title-block light clickable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Traffic - Cameras\")) : React.createElement(\"h5\", {\n      className: \"title-block light clickable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Traffic - Routes\")), !loading === false ? null : React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"camera-select__wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      onChange: this.handleSelectChange,\n      value: this.currentRoadway,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, roadways.map((roadway, index) => roadway === null ? null : React.createElement(\"option\", {\n      key: index,\n      value: roadway,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, roadway))), React.createElement(\"span\", {\n      className: \"helper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    })), React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      onSuggestionSelected: this.onSuggestionSelected,\n      getSuggestionValue: this.getSuggestionValue,\n      renderSuggestion: this.renderSuggestion,\n      inputProps: inputProps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })), React.createElement(TrafficCameras, {\n      roads: roads,\n      camIndex: camIndex,\n      ref: this.cameraElement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/aundrekerr/Projects/React2019/cp24/src/components/Traffic.js"],"names":["React","TrafficCameras","Autosuggest","fetchCameras","Traffic","Component","constructor","props","handleSelectChange","event","newRoads","state","cameras","filter","cam","RoadwayName","target","value","Organization","setState","roads","currentRoadway","onChange","newValue","method","onSuggestionsFetchRequested","roadNames","map","road","Name","suggestions","getSuggestions","onSuggestionsClearRequested","onSuggestionSelected","suggestionValue","console","log","myRef","current","newIndex","findIndex","e","camIndex","loading","roadways","trafficToggle","createRef","componentDidMount","then","data","cams","Set","inputValue","trim","toLowerCase","x","includes","getSuggestionValue","suggestion","renderSuggestion","render","inputProps","placeholder","roadway","index","cameraElement"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TrafficCameras from './traffic/TrafficCameras.js';\nimport Autosuggest from 'react-autosuggest';\n\nimport { fetchCameras } from '../utils/api';\n\nimport '../styles/components/traffic/_traffic.scss';\nimport '../styles/components/traffic/_camera-select.scss';\n\n/**\n * Component responsible for rendering the traffic components.\n */\nexport default class Traffic extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.state = {\n\t\t\tloading: true,\n\t\t\tcameras: {},\n\t\t\tcamIndex: 0,\n\t\t\troadways: [],\n\t\t\troads: [],\n\t\t\tcurrentRoadway: 'select',\n\t\t\tvalue: '',\n\t\t\tsuggestions: [],\n\t\t\ttrafficToggle: 'cameras'\n\t\t}\n\n\t\tthis.myRef = React.createRef();\n\t}\n\n\t\n\n\tcomponentDidMount() {\n\t\tfetchCameras()\n\t\t\t.then((data) => {\n\t\t\t\tconst cams = data.filter(cam => cam.Organization === \"MTO\");\n\t\t\t\tconst roadways = [...(new Set(cams.map(({ RoadwayName }) => RoadwayName)))];\n\t\t\t\tconst roads = data.filter(cam => cam.RoadwayName === \"HWY 401\" && cam.Organization === \"MTO\");\n\t\t\t\tconst roadNames = roads.map(road => (road.Name))\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tloading: false,\n\t\t\t\t\tcameras: cams,\n\t\t\t\t\troadways: roadways,\n\t\t\t\t\troads: roads,\n\t\t\t\t\tcurrentRoadway: roadways[0],\n\t\t\t\t\tsuggestions: roadNames\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\thandleSelectChange = (event) => {\n\t\tconst newRoads = this.state.cameras.filter(cam => cam.RoadwayName === event.target.value && cam.Organization === \"MTO\");\n\n\t\tthis.setState({\n\t\t\troads: newRoads,\n\t\t\tcurrentRoadway: event.target.value,\n\t\t\tvalue: ''\n\t\t})\n\t}\n\n\tonChange = (event, { newValue, method }) => {\n\t\tthis.setState({\n\t\t\tvalue: newValue\n\t\t});\n\t}\n\n\tonSuggestionsFetchRequested = ({ value }) => {\n\t\tconst roadNames = this.state.roads.map(road => (road.Name))\n\t\t\n\t\tthis.setState({\n\t\t\tsuggestions: this.getSuggestions(value, roadNames)\n\t\t});\n\t}\n\n\tonSuggestionsClearRequested = () => {\n\t\tthis.setState({\n\t\t\tsuggestions: []\n\t\t});\n\t}\n\n\tonSuggestionSelected = (event, {suggestionValue}) => {\n\t\tconsole.log('traffic', this.myRef.current)\n\t\tconst newIndex = this.state.roads.findIndex(e => e.Name === suggestionValue)\n\n\t\tthis.setState({\n\t\t\tcamIndex: newIndex\n\t\t})\n\t}\n\n\tgetSuggestions(value, roads) {\n\t\tconst inputValue = value.trim().toLowerCase();\n\t\treturn roads.filter(x => x.toLowerCase().includes(inputValue.toLowerCase()));\n\t};\n\n\tgetSuggestionValue(suggestion) {\n\t\treturn suggestion;\n\t}\n\n\trenderSuggestion(suggestion) {\n\t\treturn (\n\t\t\t<span>{suggestion}</span>\n\t\t)\n\t}\n\n\trender() {\n\t\tconst { loading, trafficToggle, roads, roadways, camIndex, currentRoadway, suggestions, value, onChange } = this.state;\n\t\tconst inputProps = {\n\t\t\tplaceholder: \"Enter a road...\",\n\t\t\tvalue,\n\t\t\tonChange: this.onChange\n\t\t};\n\n\t\treturn (\n\t\t\t<div className=\"traffic__wrapper\">\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t{\n\t\t\t\t\t\t!loading === false \n\t\t\t\t\t\t? <p>loading traffic</p> \n\t\t\t\t\t\t: trafficToggle === 'cameras'\n\t\t\t\t\t\t\t? <h5 className='title-block light clickable'><span>Traffic - Cameras</span></h5>\n\t\t\t\t\t\t\t: <h5 className='title-block light clickable'><span>Traffic - Routes</span></h5>\n\t\t\t\t\t}\n\n\t\t\t\t\t{\n\t\t\t\t\t\t!loading === false \n\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t: <React.Fragment>\n\t\t\t\t\t\t\t\t<div className=\"camera-select__wrapper\">\n\t\t\t\t\t\t\t\t\t<select onChange={this.handleSelectChange} value={this.currentRoadway}>\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\troadways.map((roadway, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\troadway === null \n\t\t\t\t\t\t\t\t\t\t\t\t\t? null\n\t\t\t\t\t\t\t\t\t\t\t\t\t: <option key={index} value={roadway}>{roadway}</option>\n\t\t\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t<span className=\"helper\"/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<Autosuggest \n\t\t\t\t\t\t\t\t\tsuggestions={suggestions}\n\t\t\t\t\t\t\t\t\tonSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n\t\t\t\t\t\t\t\t\tonSuggestionsClearRequested={this.onSuggestionsClearRequested}\n\t\t\t\t\t\t\t\t\tonSuggestionSelected={this.onSuggestionSelected}\n\t\t\t\t\t\t\t\t\tgetSuggestionValue={this.getSuggestionValue}\n\t\t\t\t\t\t\t\t\trenderSuggestion={this.renderSuggestion}\n\t\t\t\t\t\t\t\t\tinputProps={inputProps} \n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t}\n\n\t\t\t\t\t<TrafficCameras \n\t\t\t\t\t\troads={roads}\n\t\t\t\t\t\tcamIndex={camIndex}\n\t\t\t\t\t\tref={this.cameraElement} />\n\t\t\t\t</React.Fragment>\n\t\t\t</div>\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}