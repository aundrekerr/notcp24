{"ast":null,"code":"var _jsxFileName = \"/Users/aundrekerr/Projects/React2019/cp24/src/components/Weather.js\";\nimport React from 'react';\nimport WeeklyForecast from './weather/WeeklyForecast.js';\nimport CitySelect from './weather/CitySelect.js';\nimport { fetchWeekForecast, fetchDayForecast, fetchCityList } from '../utils/api';\nconst CitySelectContext = React.createContext();\n/**\n * Component responsible for rendering weather component.\n */\n\nexport default class Weather extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      week_forecast: null,\n      day_forecast: null,\n      city_list: null,\n      current_location_id: 6167865\n    };\n\n    this.checkTime = time => {\n      const date = new Date(time * 1000);\n      const hour = date.getHours();\n\n      switch (hour) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n          return 'NITE';\n\n        case 6:\n        case 7:\n        case 8:\n        case 9:\n        case 10:\n        case 11:\n        case 12:\n          return 'MORN';\n\n        case 13:\n        case 14:\n        case 15:\n        case 16:\n        case 17:\n        case 18:\n        case 19:\n          return 'AFT';\n\n        case 20:\n        case 21:\n        case 22:\n        case 23:\n        case 24:\n        case 25:\n        case 26:\n          return 'EVE';\n\n        default:\n          return \"YERRRRRR\";\n      }\n    };\n\n    this.changeCity = e => {\n      this.setState({\n        current_location_id: e.target.value\n      });\n      console.log(this.state.current_location_id);\n    };\n  }\n\n  componentDidMount() {\n    /** Gets list of cities for <select> element.  **/\n    fetchCityList().then(data => {\n      this.setState({\n        city_list: data\n      });\n    });\n    /** Grabs forecast for the week. **/\n\n    fetchWeekForecast(this.state.current_location_id).then(forecast => {\n      forecast.list = forecast.list.filter(function (value, index, Arr) {\n        return index % 2 === 0;\n      });\n      forecast.list.length = 5;\n      this.setState({\n        week_forecast: forecast.list\n      });\n      console.log(this.state.week_forecast);\n    }); // /** Grabs forecast for the week. **/\n    // fetchDayForecast(this.state.current_location_id)\n    // \t.then((forecast) => {\n    // \t\tconsole.log('day', forecast)\n    // \t})\n  }\n\n  render() {\n    const _this$state = this.state,\n          week_forecast = _this$state.week_forecast,\n          day_forecast = _this$state.day_forecast,\n          current_location_id = _this$state.current_location_id,\n          city_list = _this$state.city_list,\n          checkTime = _this$state.checkTime,\n          changeCity = _this$state.changeCity;\n    return React.createElement(\"div\", {\n      className: \"forecast__wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, week_forecast === null ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"loading\") : React.createElement(WeeklyForecast, {\n      forecast: week_forecast,\n      checkTime: this.checkTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(CitySelectContext.Provider, {\n      value: this.state.current_location_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, city_list === null ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"loading\") : React.createElement(CitySelect, {\n      cityList: city_list,\n      currentLocation: current_location_id,\n      changeCity: this.changeCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/aundrekerr/Projects/React2019/cp24/src/components/Weather.js"],"names":["React","WeeklyForecast","CitySelect","fetchWeekForecast","fetchDayForecast","fetchCityList","CitySelectContext","createContext","Weather","Component","state","week_forecast","day_forecast","city_list","current_location_id","checkTime","time","date","Date","hour","getHours","changeCity","e","setState","target","value","console","log","componentDidMount","then","data","forecast","list","filter","index","Arr","length","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport WeeklyForecast from './weather/WeeklyForecast.js';\nimport CitySelect from './weather/CitySelect.js';\n\nimport { fetchWeekForecast, fetchDayForecast, fetchCityList } from '../utils/api';\n\n\nconst CitySelectContext = React.createContext();\n\n/**\n * Component responsible for rendering weather component.\n */\nexport default class Weather extends React.Component {\n\t/** Default location id is Toronto.  **/\n\tstate = {\n\t\tweek_forecast: null,\n\t\tday_forecast: null,\n\t\tcity_list: null,\n\t\tcurrent_location_id: 6167865 \n\t}\n\n\tcomponentDidMount() {\n\t\t/** Gets list of cities for <select> element.  **/\n\t\tfetchCityList()\n\t\t\t.then((data) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tcity_list: data\n\t\t\t\t})\n\t\t\t})\n\n\t\t/** Grabs forecast for the week. **/\n\t\tfetchWeekForecast(this.state.current_location_id)\n\t\t\t.then((forecast) => {\n\t\t\t\tforecast.list = forecast.list.filter(function(value, index, Arr) {\n\t\t\t\t\treturn index % 2 === 0;\n\t\t\t\t});\n\n\t\t\t\tforecast.list.length = 5;\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tweek_forecast: forecast.list\n\t\t\t\t})\n\n\t\t\t\tconsole.log(this.state.week_forecast)\n\t\t\t});\n\n\t\t// /** Grabs forecast for the week. **/\n\t\t// fetchDayForecast(this.state.current_location_id)\n\t\t// \t.then((forecast) => {\n\t\t// \t\tconsole.log('day', forecast)\n\t\t// \t})\n\t}\n\n\n\tcheckTime = (time) => {\n\t\tconst date = new Date(time * 1000)\n\t\tconst hour = date.getHours();\n\n\t\tswitch (hour){\n\t\t\tcase 0: \n\t\t\tcase 1: \n\t\t\tcase 2: \n\t\t\tcase 3: \n\t\t\tcase 4: \n\t\t\tcase 5: \n\t\t\t\treturn 'NITE';\n\n\t\t\tcase 6: \n\t\t\tcase 7: \n\t\t\tcase 8: \n\t\t\tcase 9: \n\t\t\tcase 10: \n\t\t\tcase 11: \n\t\t\tcase 12: \n\t\t\t\treturn 'MORN';\n\t\t\t\n\t\t\tcase 13: \n\t\t\tcase 14: \n\t\t\tcase 15: \n\t\t\tcase 16: \n\t\t\tcase 17: \n\t\t\tcase 18: \n\t\t\tcase 19: \n\t\t\t\treturn 'AFT';\n\t\t\t\n\t\t\tcase 20: \n\t\t\tcase 21: \n\t\t\tcase 22: \n\t\t\tcase 23: \n\t\t\tcase 24: \n\t\t\tcase 25: \n\t\t\tcase 26: \n\t\t\t\treturn 'EVE';\n\n\t\t\tdefault:\n\t\t\t\treturn \"YERRRRRR\"\n\n\t\t}\n\t}\n\n\tchangeCity = (e) => {\n\t\tthis.setState({\n\t\t\tcurrent_location_id: e.target.value\n\t\t})\n\t\tconsole.log(this.state.current_location_id)\n\t}\n\n\trender() {\n\t\tconst { week_forecast, day_forecast, current_location_id, city_list, checkTime, changeCity } = this.state;\n\t\treturn (\n\t\t\t<div className=\"forecast__wrapper\">\n\t\t\t\t{ week_forecast === null ? <p>loading</p> : <WeeklyForecast forecast={week_forecast} checkTime={this.checkTime} /> }\n\t\t\t\t\n\t\t\t\t<CitySelectContext.Provider value={this.state.current_location_id}>\n\t\t\t\t\t{ city_list === null ? <p>loading</p> : <CitySelect cityList={city_list} currentLocation={current_location_id} changeCity={this.changeCity} /> }\n\t\t\t\t</CitySelectContext.Provider>\n\t\t\t</div>\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}