{"ast":null,"code":"var _jsxFileName = \"/Users/aundrekerr/Projects/React2019/cp24/src/components/Video.js\";\nimport React from 'react';\nimport YouTube from 'react-youtube';\nimport VideoList from './video/VideoList.js';\nimport { fetchYouTubeVideos } from '../utils/api';\nimport '../styles/components/video/_video-player.scss';\n/**\n * Component responsible for rendering the video player components.\n */\n\nexport default class Video extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      playerToggle: 'desktop',\n      viewStatus: 'hide',\n      videoList: null,\n      videoListIndex: 0,\n      currentVideo: null\n    };\n\n    this.prevVideo = event => {\n      if (this.state.videoListIndex >= 0) {\n        this.setState({\n          videoListIndex: this.state.videoListIndex - 1,\n          currentVideo: this.state.videoList[this.state.videoListIndex - 1].id.videoId\n        });\n        event.target.playVideo();\n      }\n    };\n\n    this.nextVideo = event => {\n      if (this.state.videoListIndex < 11) {\n        this.setState({\n          videoListIndex: this.state.videoListIndex + 1,\n          currentVideo: this.state.videoList[this.state.videoListIndex + 1].id.videoId\n        });\n        event.target.playVideo();\n      }\n    };\n\n    this.loadNewVideo = (event, index) => {\n      this.setState({\n        videoListIndex: index,\n        currentVideo: this.state.videoList[index].id.videoId\n      });\n    };\n\n    this.toggleView = () => {\n      this.setState(({\n        viewStatus\n      }) => ({\n        viewStatus: viewStatus === 'hide' ? 'show' : 'hide'\n      }));\n    };\n  }\n\n  componentDidMount() {\n    /** Get the 10 latest YouTube videos. **/\n    fetchYouTubeVideos().then(videos => {\n      this.setState({\n        videoList: videos,\n        currentVideo: videos[this.state.videoListIndex].id.videoId\n      });\n    });\n  }\n  /** Load the previous video in the videoList array. **/\n\n\n  render() {\n    /** YouTube Iframe player parameters. **/\n    const opts = {\n      height: '390',\n      width: '640',\n      playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        autoplay: 0,\n        controls: 1,\n        mute: 1,\n        modestbranding: 1,\n        playsinline: 1\n      }\n    };\n    const _this$state = this.state,\n          videoList = _this$state.videoList,\n          currentVideo = _this$state.currentVideo,\n          viewStatus = _this$state.viewStatus;\n    return React.createElement(\"div\", {\n      className: \"video__wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, videoList === null ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"loading desktop player\") : React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"video-list__toggle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: process.env.PUBLIC_URL + '/images/streamline-icon-list-bullets@24x24.svg',\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"video-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(YouTube, {\n      videoId: currentVideo,\n      opts: opts,\n      onEnd: this.nextVideo,\n      onReady: this._onReady,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })), React.createElement(VideoList, {\n      videos: videoList,\n      toggleVideoList: this.toggleVideoList,\n      toggleView: this.toggleView,\n      viewStatus: viewStatus,\n      loadNewVideo: this.loadNewVideo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    })));\n  }\n\n  _onReady(event) {// access to player in all event handlers via event.target\n    // event.target.pauseVideo();\n  }\n\n}","map":{"version":3,"sources":["/Users/aundrekerr/Projects/React2019/cp24/src/components/Video.js"],"names":["React","YouTube","VideoList","fetchYouTubeVideos","Video","Component","state","playerToggle","viewStatus","videoList","videoListIndex","currentVideo","prevVideo","event","setState","id","videoId","target","playVideo","nextVideo","loadNewVideo","index","toggleView","componentDidMount","then","videos","render","opts","height","width","playerVars","autoplay","controls","mute","modestbranding","playsinline","process","env","PUBLIC_URL","_onReady","toggleVideoList"],"mappings":"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","sourcesContent":["import React from 'react';\nimport YouTube from 'react-youtube';\nimport VideoList from './video/VideoList.js';\n\nimport { fetchYouTubeVideos } from '../utils/api';\n\nimport '../styles/components/video/_video-player.scss';\n\n\n/**\n * Component responsible for rendering the video player components.\n */\nexport default class Video extends React.Component {\n\tstate = {\n\t\tplayerToggle: 'desktop',\n\t\tviewStatus: 'hide',\n\t\tvideoList: null,\n\t\tvideoListIndex: 0,\n\t\tcurrentVideo: null,\n\t}\n\n\tcomponentDidMount() {\n\n\t\t/** Get the 10 latest YouTube videos. **/\n\t\tfetchYouTubeVideos()\n\t\t\t.then((videos) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tvideoList: videos,\n\t\t\t\t\tcurrentVideo: videos[this.state.videoListIndex].id.videoId\n\t\t\t\t});\n\t\t\t})\n\t}\n\n\t/** Load the previous video in the videoList array. **/\n\tprevVideo = (event) => {\n\t\tif ( this.state.videoListIndex >= 0 ) {\n\n\t\t\tthis.setState({\n\t\t\t\tvideoListIndex: this.state.videoListIndex - 1,\n\t\t\t\tcurrentVideo: this.state.videoList[this.state.videoListIndex - 1].id.videoId\n\t\t\t})\n\n\t\t\tevent.target.playVideo();\n\t\t}\n\t}\n\n\t/** Load the next video in the videoList array. **/\n\tnextVideo = (event) => {\n\t\tif ( this.state.videoListIndex < 11 ) {\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\tvideoListIndex: this.state.videoListIndex + 1,\n\t\t\t\tcurrentVideo: this.state.videoList[this.state.videoListIndex + 1].id.videoId\n\t\t\t})\n\t\t\t\n\t\t\tevent.target.playVideo();\n\t\t}\n\t}\n\n\t/** Manually load a video from the passed-in video ID. **/\n\tloadNewVideo = (event, index) => {\n\t\tthis.setState({\n\t\t\tvideoListIndex: index,\n\t\t\tcurrentVideo: this.state.videoList[index].id.videoId\n\t\t})\n\t}\n\n\t/** Toggle the video list selection. **/\n\ttoggleView = () => {\n\t\tthis.setState(({viewStatus}) => ({\n\t\t\tviewStatus: viewStatus === 'hide' ? 'show' : 'hide'\n\t\t}))\n\t}\n\n\trender() {\n\n\t\t/** YouTube Iframe player parameters. **/\n\t\tconst opts = {\n\t\t\theight: '390',\n\t\t\twidth: '640',\n\t\t\tplayerVars: { // https://developers.google.com/youtube/player_parameters\n\t\t\t\tautoplay: 0,\n\t\t\t\tcontrols: 1,\n\t\t\t\tmute: 1,\n\t\t\t\tmodestbranding: 1,\n\t\t\t\tplaysinline: 1\n\t\t\t}\n\t\t}\n\n\t\tconst { videoList, currentVideo, viewStatus } = this.state;\n\n\n\t\treturn (\n\t\t\t<div className='video__wrapper'>\n\t\t\t\t{ \n\t\t\t\t\tvideoList === null \n\t\t\t\t\t\t? <p>loading desktop player</p> \n\t\t\t\t\t\t: <React.Fragment>\n\t\t\t\t\t\t\t<div className=\"video-list__toggle\"><img src={process.env.PUBLIC_URL + '/images/streamline-icon-list-bullets@24x24.svg'} alt=''/></div>\n\t\t\t\t\t\t\t<div className='video-container'>\n\t\t\t\t\t\t\t\t<YouTube \n\t\t\t\t\t\t\t\t\tvideoId={currentVideo} \n\t\t\t\t\t\t\t\t\topts={opts}\n\t\t\t\t\t\t\t\t\tonEnd={this.nextVideo}\n\t\t\t\t\t\t\t\t\tonReady={this._onReady} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<VideoList \n\t\t\t\t\t\t\t\tvideos={videoList} \n\t\t\t\t\t\t\t\ttoggleVideoList={this.toggleVideoList} \n\t\t\t\t\t\t\t\ttoggleView={this.toggleView}\n\t\t\t\t\t\t\t\tviewStatus={viewStatus} \n\t\t\t\t\t\t\t\tloadNewVideo={this.loadNewVideo} />\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\n\t\t\t\t }\n\t\t\t\t\n\t\t\t</div>\n\t\t)\n\t}\n\n\t_onReady(event) {\n\t\t// access to player in all event handlers via event.target\n\t\t// event.target.pauseVideo();\n\t}\n}"]},"metadata":{},"sourceType":"module"}